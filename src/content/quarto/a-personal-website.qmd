---
title: "My Personal Website: Mostly to Learn How to Build One"
author: "Guillaume Noblet"
date: today
categories: [React, Website, quarto, TypeScript]
image: "images/blog/a-personal-website.png"
excerpt: "A totally-not-desperate showcase of what I used to build this website, featuring React, TypeScript, and Quarto."
format:
  html:
    theme: templates/website-dark-blue.scss
    minimal: true
    page-layout: article
    toc: false
    code-fold: false
    code-tools: true
    self-contained: true
    embed-resources: true
    include-in-header:
      - text: |
          <style>
            /* Hide all navigation elements */
            nav, header.navbar, .navbar, .quarto-navbar, .sidebar {
              display: none !important;
            }

            /* Make sure Observable outputs look good */
            .ojs-wrapper, .ojs-output-wrapper, .ojs-shell-container {
              background: transparent !important;
            }
          </style>
---

## Why I Built This Website (Hint: Pure Employability)

Let's be honest: the primary function of a personal website in 2025 is to serve as a digital billboard that screams "PLEASE HIRE ME" in the a very sophisticated way. After all, what better way to demonstrate my employability than by showcasing a bunch of tools and technologies that will probably be obsolete by the time you finish reading this---or I even finish writing this post? So here it is—--an attempt at a meticulously crafted website.

## The Tech Stack (AKA "Things I May or May Not List on My Resume")

This website was built with:

- **React** - Because using vanilla JavaScript is far too far from my comfort zone
- **TypeScript** - So I can pretend I care about type safety while this is actually to get lazy
- **Vite** - Not sure why, but it's working well and fast and efficient
- **Github Copilot** - As a helper, otherwise this website wouldn't exist

All of this was lovingly developed on my [Framework 13](https://frame.work) laptop running [Fedora KDE 42](https://fedoraproject.org/kde/), which I'm happy to mention in every (technical?) conversation since I've been using Linux for the paste 15 years.

## The Real MVP: My Code Editor

I've recently switched to [Zed](https://zed.dev/), the "blazingly fast code editor" written in Rust, which automatically makes anything 300% more impressive to mention in technical conversations.

While I settle on Positron for data projects still, e.g., to write blog posts with Quarto, I started settling on Zed for most things. Imho both the integration of the Agent and less clutter and more focus on content really helps writing and building blocks of code.

## Features of the Website I Was Happy Spending Time On Polishing

### Light/Dark Theme Toggle

```typescript
const ThemeToggle = () => {
  const { theme, toggleTheme } = useTheme();
  return (
    <Toggle
      icon={theme === 'dark' ? <FiSun /> : <FiMoon />}
      onClick={toggleTheme}
      ariaLabel={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}
    />
  );
};
```

That's right—I implemented a theme toggle. Sure, there are ready-to-go ways that do this exact thing, but I wrote mine from scratch because of "learning purposes." Anyway, the beauty of having both light and dark themes is that I can now proudly claim both on my resume and I had fun implementing the toggle, but above all to choose colors for both themes.

### The Leaf Animation with Bezier Curves

The crown jewel of my website is undoubtedly the leaf animation that uses Bezier curves to create a not-really-sense of smooth, natural movements. Let me show you a small snippet of this masterpiece:

```typescript
// Drawing a leaf using bezier curves
const drawLeaf = (ctx: CanvasContext, leaf: Leaf) => {
  ctx.save();
  ctx.translate(leaf.x, leaf.y);
  ctx.rotate(leaf.rotation + Math.sin(leaf.wobble) * leaf.wobbleAmplitude);

  // Create path for the leaf shape using bezier curves
  ctx.beginPath();
  ctx.moveTo(0, -leaf.size/2);
  ctx.bezierCurveTo(
    leaf.size/2, -leaf.size/4,
    leaf.size/2, leaf.size/4,
    0, leaf.size/2
  );
  ctx.bezierCurveTo(
    -leaf.size/2, leaf.size/4,
    -leaf.size/2, -leaf.size/4,
    0, -leaf.size/2
  );

  ctx.fillStyle = leaf.color;
  ctx.fill();
  ctx.restore();
};
```

Is this animation necessary? Absolutely not. Does it occasionally cause performance issues? Perhaps. But does it make me seem like a creative developer with an eye for detail and unnecessary animations? I sure hope so!

The amount of time I spent perfecting the wobble coefficient or the mouse movement's effect of these leaves is far too big.

### Quarto Document Integration

Perhaps the most impressive feature of this website is the (seamless, but not fully yer) integration of Quarto documents. Quarto, for those not in the know, it is a scientific and technical publishing system built on Pandoc.

What makes this integration special is that each Quarto document can have its own theming. This means I can write technical blog posts with custom styling, interactive visualizations, and embedded code that actually runs. It's perfect for showing off data visualizations or explaining complex concepts. And as simple as markdown for 'simple' blog writing.

## Conclusion: Will This Get Me Hired?

I've learned a ton building this site—from React component structure to TypeScript typing, from CSS animations to optimization techniques. It's been a fun project, and there are most likely many things to review and improve on the webiste, but I am taking a pausee from it now.

If you're reading this and happen to be hiring, my contact information is just a click away on the Home page!
