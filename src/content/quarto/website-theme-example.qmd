---
title: "Using a Custom Theme in Quarto Documents"
author: "Data Explorer"
date: "2023-12-19"
categories: [quarto, styling, customization]
image: "https://images.unsplash.com/photo-1618004912476-29818d81ae2e?q=80&w=1664&auto=format&fit=crop"
excerpt: "An example showing how to create Quarto documents with their own independent theme customization."
format: 
  html:
    theme: cosmo
    minimal: true
    page-layout: article
    toc: true
    code-fold: false
    code-tools: true
    self-contained: true
    embed-resources: true
    include-in-header:
      - text: |
          <style>
            /* Hide all navigation elements */
            nav, header.navbar, .navbar, .quarto-navbar, .sidebar {
              display: none !important;
            }
            
            /* Special styling for theme demo */
            .theme-demo-box {
              padding: 1rem;
              margin: 1rem 0;
              border-radius: 8px;
              border: 1px solid #dee2e6;
            }
          </style>
---

# Custom Theme Integration

This document demonstrates how Quarto documents can have their own independent theme. Each document can specify its own typography, colors, spacing, and other design elements.

## How It Works

Using Quarto's theming system:

1. Specify a theme in the YAML frontmatter (`theme: cosmo` in this case)
2. Add custom CSS for additional styling if needed
3. Each document can have a completely different look and feel

Here are examples of elements using the custom theme:

## Typography Demo

Text in this document uses the Cosmo theme's default font family and sizes.

### Headings Use the Theme Style

Headings use the theme's heading font, sizes, and colors.

> Blockquotes adopt the theme's accent color and styling.

## Code Examples

Code blocks use your website's code styling:

```python
# Python example
def greet(name):
    """Say hello to someone"""
    return f"Hello, {name}!"
    
# Let's try it
message = greet("World")
print(message)  # Outputs: Hello, World!
```

And here's some R code:

```{r}
#| label: r-example
#| fig-cap: "A simple bar plot styled with the website's theme"

# Create a simple dataset
categories <- c("Category A", "Category B", "Category C", "Category D")
values <- c(25, 40, 15, 35)
data <- data.frame(Category = categories, Value = values)

# Create a bar plot
barplot(data$Value, 
        names.arg = data$Category,
        col = "#5b6fe9",
        main = "Sample Bar Chart",
        xlab = "Categories",
        ylab = "Values",
        border = "white")
```

## Tables

Tables also inherit your website's styling:

| Feature | Description | Status |
|---------|-------------|--------|
| Typography | Fonts, sizes, and colors | ✓ |
| Code blocks | Syntax highlighting and background | ✓ |
| Tables | Border styles and backgrounds | ✓ |
| Interactive elements | Buttons, inputs, and controls | ✓ |
| Responsive design | Adapts to different screen sizes | ✓ |

## Interactive Elements

Buttons and form elements match your website's style:

<div class="theme-demo-box">
  <button class="btn btn-primary" style="background-color: #5b6fe9; border-color: #5b6fe9;">Primary Button</button>
  <button class="btn btn-secondary" style="background-color: #6c757d; border-color: #6c757d;">Secondary Button</button>
  <hr>
  <label for="demo-input">Sample input:</label>
  <input type="text" id="demo-input" value="Text input styling" />
</div>

## Theme Benefits

This document showcases independent theme styling with benefits like:

- Custom background and text colors
- Typography and font styling specific to this document
- Document-specific spacing and layout conventions
- Unique link and accent colors
- Component styling tailored to content
- Visual hierarchy optimized for the document

## Benefits of Independent Theming

With independent themes for each Quarto document:

1. **Content-appropriate styling** for different types of documents
2. **Freedom to experiment** with different visual styles
3. **Specialized styling** for technical vs non-technical content
4. **Easier migration** as documents can be moved to other sites

## Implementation

To use a custom theme in your own Quarto documents, add these lines to your document's YAML header:

```yaml
format: 
  html:
    theme: cosmo  # or any other Quarto theme
    css: custom.css  # optional custom CSS
    minimal: true
    page-layout: article
    toc: true
    code-fold: false
    code-tools: true
    self-contained: true
    embed-resources: true
```

## Conclusion

With this approach, each Quarto document can have its own styling optimized for its specific content while leveraging Quarto's powerful computational features.